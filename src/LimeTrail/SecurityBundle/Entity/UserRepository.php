<?php

namespace LimeTrail\SecurityBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $query = $this->createQueryBuilder('u')
                 ->select('u', 'r')
                 ->leftJoin('u.roles', 'r')
                 ->where('u.username = :username OR u.email = :email')
                 ->setParameter('username', $username)
                 ->setParameter('email', $username)
                 ->getQuery();

       // The Query::getSingleResult() method throws an exception
       // if there is no record matching the criteria.
       try {
           $user = $query->getSingleResult();
       } catch (NoResultException $e) {
           $message = sprinf(
           'Unable to find an active admin LimeTrailSecurityBundle:User object identified by "%s".',
           $username);
           throw new UsernameNotFoundException($message, 0, $e);
       }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportClass($class)) {
            throw new UnsupportedUserException(
            sprintf('Instances of "%s" are not supported.', $class)
         );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() == $class
         || is_subclass_of($class, $this->getEntityName());
    }
}
