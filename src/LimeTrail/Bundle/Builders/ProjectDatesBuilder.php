<?php

namespace LimeTrail\Bundle\Builders;

use Doctrine\ORM\EntityManager;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Translation\TranslatorInterface;
use Symfony\Component\Routing\RouterInterface;
use Thrace\DataGridBundle\DataGrid\DataGridFactoryInterface;
use Thrace\DataGridBundle\DataGrid\CustomButton;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectDatesBuilder
{
    const IDENTIFIER = 'project_dates';
    protected $factory;
    protected $translator;
    protected $router;
    protected $em;
    protected $container;

    public function __construct(DataGridFactoryInterface $factory,
             TranslatorInterface $translator,
             RouterInterface $router,
             EntityManager $em,
             ContainerInterface $container)
    {
        $this->factory = $factory;
        $this->translator = $translator;
        $this->router = $router;
        $this->em = $em;
        $this->container = $container;
    }

    public function build()
    { /* https://github.com/thrace-project/datagrid-bundle/blob/master/Resources/doc/index.md#installation */
// http://stackoverflow.com/questions/5396352/jqgrid-advanced-search-beforesearch-option
        $dataGrid = $this->factory->createDataGrid(self::IDENTIFIER);
        $query = 'p.id, d.runDate,
d.recAct as RecActual, d.recPrj as RecProjected, d.intClosingAct as InternalClosingActual, d.intClosingPrj as InternalClosingProjected,
d.landUcAct as LandUnderContractActual, d.landUcPrj as LandUnderContractProjected,
d.leaseExecuteAct as LeaseActual, d.leaseExecutePrj as LeaseProjected, d.cityCouncilAct as CityCouncilActual, d.cityCouncilPrj as CityCouncilProjected,
d.drcDrbAct as DrcActual, d.drcDrbPrj as DrcProjected,
d.entitleAct as EntitlementActual, d.entitlePrj as EntitlementProjected, d.pAndZAct as PlanningZoningActual, d.pAndZPrj as PlanningZoningProjected,
d.phaseIAct as PhaseOneActual, d.PhaseIIAct as PhaseTwoActual, d.desCivilAct as DesignCivilActual, d.desCivilPrj as DesignCivilProjected,
d.cwaAct as CivilWalkAroundActual, d.cwaPrj as CivilWalkAroundProjected, d.pwoAct as PwoActual, d.pwoPrj as PwoProjected, d.pwoIdAct as PwoIdActual,
d.pwoIdPrj as PwoIdProjected, d.otpAct as OtpActual, d.otpPrj as OtpProjected, d.archPermitAct as ArchitecturalPermitActual,
d.archPermitPrj as ArchitecturalPermitProjected, d.civilPermitAct as CivilPermitActual, d.civilPermitPrj as CivilPermitProjected,
d.otbReviewAct as OtbReviewActual, d.otbReviewPrj as OtbReviewProjected, d.otbAct as OtbActual, d.otbPrj as OtbProjected,
d.otbPossDays as NumberOfDaysFromOtbToPoss, d.bidDateAct as BidActual, d.bidDatePrj as BidProjected, d.awardAct as AwardActual,
d.awardPrj as AwardProjected, d.constrStartAct as ConstructionStartActual, d.constrStartPrj as ConstructionStartProjected,
d.possAct as PossessionActual, d.possPrj as PossessionProjected, d.goAct as GoActual, d.goPrj as GoProjected, p';

        $gridModeler = $this->container->get('lime_trail_grid_model.provider');
        $gridModeler->createModel($query);

        $dataGrid
            ->setQueryBuilder($this->getQueryBuilder($query))
            ->setCaption($this->translator->trans('<a href="#">Project Dates</a>'))
            ->setColNames($gridModeler->getColNames())
            ->setColModel($gridModeler->getColModel())
            ->enableSearchButton(true)
            ->enableAddButton(true)
            ->enableEditButton(true)
            ->enableDeleteButton(true)
            #->setAddBtnUri($this->router->generate('limetrail.project_dates.add', array(), true))
            #->setEditBtnUri($this->router->generate('limetrail.project_dates.edit', array('id'  => '{id}'), true))
            #->setDeleteBtnUri($this->router->generate('limetrail.project_dates.delete', array( 'id' => '{id}'), true))
            #->setHideGrid(true)
            ->setHeight('100%')
            ->setShrinkToFit(false)
            ->setAsDependentGrid(true)
            ->setForceFit(true)
            ->setAutoWidth(true)
        ;

        $dataGrid->addCustomButton(new CustomButton('ExportXls', array(
            'title' => 'Export to Xls',
            'caption' => 'Export',
            'buttonIcon' => 'ui-icon-document',
            'position' => 'last',
            'uri' => $this->router->generate('limetrail_storeinformation_exportgrid',
                      array('grid' => self::IDENTIFIER)
                      ),
            )
          )
        );

        return $dataGrid;
    }

    protected function getQueryBuilder($query)
    {
        $qb = $this->em->getRepository('LimeTrailBundle:ProjectInformation')->createQueryBuilder('p');
        $date_from = new \DateTime(
          date('Y-m-d',
            strtotime(
              date('Y-m-d').
              " -1 weekdays "
            )
          )
        );
        $date_to = new \DateTime(date('Y-m-d'));
        $qb->select($query)
            #->from('LimeTrailBundle:Dates', 'd')
            ->Join('p.dates', 'd')
           # ->Join('si.address', 'a')
           ->where(
              $qb->expr()->between('d.runDate', ':date_from', ':date_to')
              )
           ->andWhere('p.id = :masterGridRowId')
           ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATETIME)
           ->setParameter('date_to', $date_to, \Doctrine\DBAL\Types\Type::DATETIME)
            #->setMaxResults(5)
            #->groupBy('p.id')
        ;

        return $qb;
    }
}
