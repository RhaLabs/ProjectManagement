<?php

namespace LimeTrail\Bundle\Builders;

use Doctrine\ORM\EntityManager;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Translation\TranslatorInterface;
use Symfony\Component\Routing\RouterInterface;
use Thrace\DataGridBundle\DataGrid\DataGridFactoryInterface;
use Thrace\DataGridBundle\DataGrid\CustomButton;

/**
 * ProjectinformationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DatesBuilder
{
    const IDENTIFIER = 'dates';
    protected $factory;
    protected $translator;
    protected $router;
    protected $em;
    protected $container;

    public function __construct(DataGridFactoryInterface $factory,
             TranslatorInterface $translator,
             RouterInterface $router,
             EntityManager $em,
             ContainerInterface $container)
    {
        $this->factory = $factory;
        $this->translator = $translator;
        $this->router = $router;
        $this->em = $em;
        $this->container = $container;
    }

    public function build()
    { /* https://github.com/thrace-project/datagrid-bundle/blob/master/Resources/doc/index.md#installation */

        $dataGrid = $this->factory->createDataGrid(self::IDENTIFIER);
        $query = 'si.id, si.id as Contacts, si.id as CiChanges, si.storeNumber, p.Sequence as SequenceNumber, p.projectNumber,
                p.canonicalName as ProjectName, c.name as City, s.abbreviation as State, st.name as StoreType,
                pt.name as ProjectType, dt.name as DevelopmentType, proto.name as Prototype,
                p.sap as SapNumber, py.year as ProgramYear, CONCAT(CONCAT(aor.firstName,\' \'),aor.lastName) as AorContact,
d.recAct as RecActual, d.recPrj as RecProjected, d.intClosingAct as InternalClosingActual, d.intClosingPrj as InternalClosingProjected,
d.desCivilAct as DesignCivilActual, d.desCivilPrj as DesignCivilProjected,
d.cwaAct as CivilWalkAroundActual, d.cwaPrj as CivilWalkAroundProjected, d.pwoAct as PwoActual,
d.pwoPrj as PwoProjected, d.pwoIdAct as PwoIdActual,
d.pwoIdPrj as PwoIdProjected, d.otpAct as OtpActual, d.otpPrj as OtpProjected, d.archPermitAct as ArchitecturalPermitActual,
d.archPermitPrj as ArchitecturalPermitProjected,
d.otbAct as OtbActual, d.otbPrj as OtbProjected,
d.bidDateAct as BidActual, d.bidDatePrj as BidProjected, d.awardAct as AwardActual,
d.awardPrj as AwardProjected, d.constrStartAct as ConstructionStartActual, d.constrStartPrj as ConstructionStartProjected,
d.possAct as PossessionActual, d.possPrj as PossessionProjected, d.goAct as GoActual, d.goPrj as GoProjected,
                ps.name as Status, d.runDate, p.isChanged, si';

        $gridModeler = $this->container->get('lime_trail_grid_model.provider');
        $gridModeler->createModel($query);

        $rowList = array(30,60,80,120);

        $dataGrid
            ->setQueryBuilder($this->getQueryBuilder($query))
            ->setCaption($this->translator->trans('Projects Dates (Trident)'))
            ->setColNames($gridModeler->getColNames())
            ->setColModel($gridModeler->getColModel())
            ->setSortName('City')
            ->setSortOrder('ASC')
            ->enableEditButton(true)
            ->enableSearchButton(true)
            ->setHeight('100%')
            ->setShrinkToFit(false)
            ->setRowNum(30)
            ->setRowList($rowList)
            ->setForceFit(true)
            ->setAutoWidth(true)
        ;

        $dataGrid->addCustomButton(new CustomButton('ExportXls', array(
            'title' => 'Export to Xls',
            'caption' => 'Export',
            'buttonIcon' => 'ui-icon-document',
            'position' => 'last',
            'uri' => $this->router->generate('limetrail_storeinformation_exportgrid',
                      array('grid' => self::IDENTIFIER)
                      ),
            )
          )
        );

        return $dataGrid;
    }

    protected function getQueryBuilder($query)
    {
        //$date = new \DateTime(date('Y-m-d'));
        $qb = $this->em->getRepository('LimeTrailBundle:StoreInformation')->createQueryBuilder('si');
        $qb->select($query)
            ->Join('si.projects', 'p')
            ->Join('si.city', 'c')
            ->Join('si.state', 's')
            ->Join('si.storeType', 'st')
            ->leftJoin('p.ProjectType', 'pt')
            ->leftJoin('p.DevelopmentType', 'dt')
            ->leftJoin('p.DescriptionOfType', 'des')
            ->leftJoin('p.ProgramYear', 'py')
            ->leftJoin('p.Prototype', 'proto')
            ->leftJoin('p.ProjectStatus', 'ps')
            ->Join('p.dates', 'd')
            ->leftJoin('p.dateOverride', 'o')
            ->leftJoin('p.aorContact', 'aor')

        ;

        return $qb;
    }
}
